unit Unit1;

//{$DEFINE _LOG_}

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.ImgList
  , System.Win.Registry, Contnrs, Vcl.ComCtrls, Dateutils;

type
  TForm1 = class(TForm)
    pnl_Lock: TPanel;
    edt_Lock: TEdit;
    Btn_Lock: TButton;
    PnlMain: TPanel;
    LLblMain: TLabel;
    Btn_Start: TButton;
    Btn_End: TButton;
    Btn_Help: TButton;
    Btn_Minimize: TButton;
    Btn_Close: TButton;
    Btn_WinTilte_Set1: TButton;
    Btn_WinTilte_Ret1: TButton;
    Timer_Cap: TTimer;
    ImageList_Fail: TImageList;
    Pnl_Ctrl: TPanel;
    Label5: TLabel;
    Memo2: TMemo;
    Image1: TImage;
    Image2: TImage;
    procedure FormCreate(Sender: TObject);
    procedure HideTitlebar(Form:TForm);
    function UserCheck: Boolean;
    procedure FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure Btn_StartEndClick(Sender: TObject);

    function ScreenCapture:Boolean;
    function TransColor_0(TransBmp:TBitmap):Tbitmap;
    function TransColor_1(TransBmp:TBitmap):Tbitmap;
    function TransColor_test(TransBmp:TBitmap):Tbitmap;
    function SearchBitmap(bmMain,bmSub: TBitMap): Boolean;
    function Check_Fail(bmMain: TBitMap): Integer;
    procedure Btn_LockClick(Sender: TObject);
    procedure edt_LockKeyPress(Sender: TObject; var Key: Char);
    procedure Btn_WinTilte_Setting(Sender: TObject);
    procedure Timer_CapTimer(Sender: TObject);
    procedure Btn_HelpClick(Sender: TObject);
    function NPC_Click : Boolean;

  private
    { Private declarations }
  public
    { Public declarations }
    //캡쳐본
    Bmp_Main     : TBitmap;
    Bmp_Fail     : TBitmap;
    Bmp_Retry    : TBitmap;
    Bmp_Continue : TBitmap;
    Handle_1     : THandle;

    FailFlag : Integer;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.Btn_LockClick(Sender: TObject);
//잠금
var
   Key_a        : String;
   LockKey      : Integer;
   Reg_2        : TRegistry;
begin
   Key_a := FormatDateTime('HHDDMM',Now);
   LockKey := ((StrToInt(Key_a)*922)*8);
   LockKey := StrToInt(Copy(IntToStr(LockKey),1,6));

   if IntToStr(LockKey) = edt_Lock.Text then
   begin
      try
         Reg_2 := TRegistry.Create;
         Reg_2.RootKey := HKEY_CURRENT_USER;
         Reg_2.OpenKey('\Software\MicroSoft\Windows Network', True);
         Reg_2.WriteString('Release Lock_8',DateToStr(now));
      finally
         Reg_2.CloseKey;
         Reg_2.Free;
      end;
      pnl_Lock.Visible := False;
      PnlMain.Enabled := True;
//      Btn_StartEndClick(Btn_Start);
   end else begin
      MessageDlg('키 불일치',mtError,[mbOK],0);
   end;
end;

//폼 컨트롤 - 타이틀 숨기기
procedure TForm1.HideTitlebar(Form:TForm);
var
   Save : LongInt;
begin
   if Form.BorderStyle=bsNone then Exit;
   Save:=GetWindowLong(Form.Handle,gwl_Style);
   if (Save and ws_Caption)=ws_Caption then
   begin
      case Form.BorderStyle of
         bsSingle,bsSizeable : SetWindowLong(Form.Handle,gwl_Style,Save and (not(ws_Caption)) or ws_border);
         bsDialog : SetWindowLong(Form.Handle,gwl_Style,Save and (not(ws_Caption)) or ds_modalframe or ws_dlgframe);
      end;
      Form.Height := Form.Height - getSystemMetrics(sm_cyCaption);
      Form.Refresh;
   end;
end;

//유저체크
function TForm1.UserCheck: Boolean;
var
   Reg_1 : TRegistry;
begin
   result := False;
   try
      Reg_1 := TRegistry.Create;
      Reg_1.RootKey := HKEY_CURRENT_USER;
      Reg_1.OpenKey('\Software\MicroSoft\Windows Network', True);
      if not Reg_1.ValueExists('Release Lock_8') then
      begin
         pnl_Lock.Height := Self.Height;
         pnl_Lock.Width := Self.Width;
         pnl_Lock.Top := 25;
         pnl_Lock.Left := 0;
         pnl_Lock.Color := PnlMain.Color;
         edt_Lock.Left := (pnl_Lock.Width - edt_Lock.Width) div 2;
         edt_Lock.Top := pnl_Lock.Height div 4;
         Btn_Lock.Top := edt_Lock.Top + edt_Lock.Height*2;
         Btn_Lock.Left := (pnl_Lock.Width - Btn_Lock.Width) div 2;

         PnlMain.Enabled := False;
         pnl_Lock.BringToFront;
         pnl_Lock.Visible := True;
      end else
         result := True;
   finally
      Reg_1.CloseKey;
      Reg_1.Free;
   end;
end;

procedure TForm1.FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
//폼 이동 처리
begin
   ReleaseCapture();
   SendMessage(Handle,WM_SYSCOMMAND,$F012,0 );
end;

procedure TForm1.FormCreate(Sender: TObject);
var
   bmp_test : Tbitmap;
begin
   try
      HideTitlebar(self);
      if not ((ParamStr(1) = 'DEV') or (ParamStr(2)= 'DEV')) then
      begin
         self.Width  := PnlMain.Width;
         self.Height := PnlMain.Height;
      end;

      Pnl_Ctrl.Left := PnlMain.Width - Pnl_Ctrl.Width - 8;
      Pnl_Ctrl.Top := 0 + 5;
      Pnl_Ctrl.Color := PnlMain.Color;
      Pnl_Ctrl.BringToFront;

      if UserCheck then
      begin
         Bmp_Fail     := TBitmap.Create;
         Bmp_Retry    := TBitmap.Create;
         Bmp_Continue := TBitmap.Create;
         ImageList_Fail.GetBitmap(0,Bmp_Fail);
         ImageList_Fail.GetBitmap(1,Bmp_Retry);
         ImageList_Fail.GetBitmap(2,Bmp_Continue);

//         image2.Picture := TPicture(Bmp_Fail);
      end;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :FormCreate'+'---'); {$ENDIF}
   end;
end;

procedure TForm1.Btn_StartEndClick(Sender: TObject);
begin
   try
      case (Sender as TButton).Tag of
         1:
            begin
               Handle_1 := FindWindow(nil, PChar('임대'));
               if not (Handle_1 > 0) then
               begin
                  Btn_StartEndClick(Btn_End);
                  MessageDlg('임대 없음',mtError, [mbOK], 0);
                  Exit;
               end;
               Timer_Cap.Interval        := 1000;
               Timer_Cap.Enabled         := True;      //캡쳐 타이머 0.25초

               Btn_Start.Enabled        := False;
               Btn_End.Enabled          := True;
               Btn_WinTilte_Set1.Enabled := False;
               Btn_WinTilte_Ret1.Enabled := False;

               FailFlag := 0;
            end;

         2:
            begin
               Btn_Start.Enabled          := True;
               Btn_End.Enabled            := False;
               Btn_WinTilte_Set1.Enabled  := True;
               Btn_WinTilte_Ret1.Enabled  := True;
               Timer_Cap.Enabled          := False;
               Handle_1 := 0;
   //            KeybdUnhook;
            end;

         8: Application.Minimize;
         9: Close;
      end;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :Btn_StartEndClick'+'---'); {$ENDIF}
   end;
end;

procedure TForm1.Btn_WinTilte_Setting(Sender: TObject);
//타이틀 변경
var
   wHandle : THandle;
begin
   try
      case (Sender as TButton).Tag of
         6: begin
            wHandle := FindWindow(nil, PChar('바람의나라'));
            if wHandle > 0 then
               SetWindowText(wHandle, '임대');
         end;
         7: begin
            wHandle := FindWindow(nil, PChar('임대'));
            SetWindowText(wHandle, '바람의나라');
         end;
      end;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :Btn_WinTilte_Setting'+'---'); {$ENDIF}
   end;
end;

procedure TForm1.edt_LockKeyPress(Sender: TObject; var Key: Char);
begin
   if Key = #13 then
      Btn_LockClick(Btn_Lock);
end;

function TForm1.Check_Fail(bmMain: TBitMap): Integer;
begin
   try
      result := 0;

      if SearchBitmap(bmMain, Bmp_Fail) then
         result := 1
      else if SearchBitmap(bmMain, Bmp_Retry) then
         result := 2
      else if SearchBitmap(bmMain, Bmp_Continue) then
         result := 3;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :Check_Fail'+'---'); {$ENDIF}
   end;
end;

function TForm1.ScreenCapture: Boolean;
var
   aDC: HDC;
   aRect, bRect: TRect;
   winplace: TWindowPlacement;
begin
   Result := True;
   try
      if not (Handle_1 > 0) then
      begin
         Result := False;
         Exit;
      end;

      FillChar(winplace, sizeof(winplace), 0);
      winplace.length := sizeof(winplace);

      GetWindowPlacement(Handle_1, @winplace);
      case winplace.showCmd of
         SW_HIDE, SW_SHOWMINIMIZED:
            begin
               Btn_StartEndClick(Btn_End);
               MessageDlg('최소화하지마라ㅡㅡ', mtWarning, [mbOK], 0);
               Result := False;
               Exit;
            end;
      end;
   except
      Result := False;
   end;

   try
      try
         // Bitblt(btm.Canvas.Handle,캔버스시작X, 캔버스시작Y, 캡쳐이미지width, 캡쳐이미지height, aDC, 캡쳐이미지시작X, 캡쳐이미지시작Y, SRCCOPY);
         aDC := GetDC(Handle_1); // 창 내부만    // aDC := GetWindowDC(aHandle);   //창 테두리 포함

         Bmp_Main := TBitmap.Create;
         Bmp_Main.Width  := 750;
         Bmp_Main.Height := 550;

         Bitblt(Bmp_Main.Canvas.Handle, 0, 0, 750, 550, aDC, 50, 50, SRCCOPY);

         if not (Bmp_Main = nil) then
            Bmp_Main.SaveToFile('c:\임대'+ FormatDateTime('_YYMMDD_HH시 NN분 SS초',now)+'.bmp');

         TransColor_0(Bmp_Main);
         FailFlag := Check_Fail(Bmp_Main);

         case FailFlag of
            0:
            begin
               memo2.Lines.Add(FormatDateTime('[HH:NN:SS ZZZ] ',now)+'성공');
               Btn_StartEndClick(Btn_End);
               Exit;
            end;

            1:
            begin
               memo2.Lines.Add(FormatDateTime('[HH:NN:SS ZZZ] ',now)+'실패');
               PostMessage(Handle_1, WM_KEYDOWN, VK_ESCAPE, 0);
               PostMessage(Handle_1, WM_KEYUP, VK_ESCAPE, 0);
            end;

            2:
            begin
               memo2.Lines.Add(FormatDateTime('[HH:NN:SS ZZZ] ',now)+'다시');
               PostMessage(Handle_1, WM_KEYDOWN, VK_ESCAPE, 0);
               PostMessage(Handle_1, WM_KEYUP, VK_ESCAPE, 0);
            end;

            3:
            begin
               memo2.Lines.Add(FormatDateTime('[HH:NN:SS ZZZ] ',now)+'진행');
               PostMessage(Handle_1, WM_KEYDOWN, VK_DOWN, 0);
               PostMessage(Handle_1, WM_KEYUP, VK_DOWN, 0);
               Sleep(500);
               PostMessage(Handle_1, WM_KEYDOWN, VK_RETURN, 0);
               PostMessage(Handle_1, WM_KEYUP, VK_RETURN, 0);
            end;
         end;

      except
         on E : Exception do begin
            memo2.Lines.Add(FormatDateTime('[HH:NN:SS ZZZ] ',now)+'오류');
            Result := False;
         end;
      end;
   finally
      Bmp_Main.Destroy;
      ReleaseDC(Handle_1, aDC);
      // CloseHandle(aHandle);
   end;
end;

procedure TForm1.Btn_HelpClick(Sender: TObject);
begin
   showmessage('탭 위치시키고 키면 됨' +#13#10+
               '실패시 창닫고 3시간10초뒤 다시 진행' +#13#10+
               '성공시 창 띄운채로 중지' +#13#10+
               'C:\임대_날짜.bmp 형식으로 이미지 기록' +#13#10+
               '- 다마@XX -');
end;

function TForm1.SearchBitmap(bmMain,bmSub: TBitMap): Boolean;
type
   TIntArray = array [word] of Integer;
   PIntArray = ^TIntArray;
var
   p0, p1, p2: PIntArray;
   X, Y: Integer;
   x1, y1, w, w0, w1, k: Integer;
   b: Boolean;
begin
   try
      Result := True;

      bmMain.PixelFormat := pf32bit;
      bmSub.PixelFormat := pf32bit;

      w := bmMain.Width;
      w0 := bmMain.Width * sizeof(Integer);
      w1 := bmSub.Width * sizeof(Integer);

      p0 := bmMain.ScanLine[0];
      p1 := bmSub.ScanLine[0];

      for Y := 0 to bmMain.Height - bmSub.Height do
      begin
         for X := 0 to bmMain.Width - bmSub.Width do
         begin
            b := True;
            p2 := p1;
            k := 0;
            for y1 := 0 to bmSub.Height - 1 do
            begin
               for x1 := 0 to bmSub.Width - 1 do
               begin
                  if p0[k + X + x1] <> p2[x1] then
                  begin
                     b := false;
                     break;
                  end;
               end;

               if not b then
                  break;
               Integer(p2) := Integer(p2) - w1;
               k := k - w;
            end;

            if b then
            begin
               Exit;
            end;
         end;

         Integer(p0) := Integer(p0) - w0;
      end;
      Result := false;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :SearchBitmap_map'+'---'); {$ENDIF}
   end;
end;

function Tform1.NPC_Click : Boolean;
begin
   result := False;
   PostMessage(Handle_1, WM_KEYDOWN, VK_ESCAPE, 0);
   PostMessage(Handle_1, WM_KEYUP, VK_ESCAPE, 0);
   PostMessage(Handle_1, WM_KEYDOWN, VK_TAB, 0);
   PostMessage(Handle_1, WM_KEYUP, VK_TAB, 0);
   Sleep(500);
   PostMessage(Handle_1, WM_KEYDOWN, VK_RETURN, 0);
   PostMessage(Handle_1, WM_KEYUP, VK_RETURN, 0);
   Sleep(500);
   PostMessage(Handle_1, WM_KEYDOWN, VK_RETURN, 0);
   PostMessage(Handle_1, WM_KEYUP, VK_RETURN, 0);
   result := True;
end;

procedure TForm1.Timer_CapTimer(Sender: TObject);
begin
   Timer_Cap.Interval := 10805000;
   try
      if NPC_Click then
      begin
         if ScreenCapture then
         begin
            if (FailFlag = 3) then
               ScreenCapture;
         end;
      end;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :Timer_CapTimer'+'---'); {$ENDIF}
   end;
end;

function TForm1.TransColor_0(TransBmp:TBitmap):TBitmap;
var
   Lx, Ly : Integer;
   gray : Byte;   //--
   c : TColor;
begin
   try
      result := nil;
     //_흑회백변환
      for Lx:= 0 to TransBmp.Canvas.ClipRect.Right do
      begin
         for Ly:= 0 to TransBmp.Canvas.ClipRect.Bottom do
         begin
            c:= TransBmp.Canvas.Pixels[Lx,Ly];
            gray:= (Byte(c) + Byte(c shr 8) + Byte(c shr 16)) div 3;
            TransBmp.Canvas.Pixels[Lx,Ly]:= RGB(gray,gray,gray);

            if TransBmp.Canvas.Pixels[ Lx, Ly ] > $000FFFFF then
               TransBmp.Canvas.Pixels[ Lx, Ly ] := $00FFFFFF;
         end;
      end;
      result := TransBmp;
//      TransBmp := nil;
      //Red:$000000FF Blue:$00FF0000 Green:$00008000 White:$00FFFFFF Black:$00000000 Yellow:$0000FFFF Gray:$00C0C0C0
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :TransColor_0'+'---'); {$ENDIF}
   end;
end;

function TForm1.TransColor_1(TransBmp: TBitmap): Tbitmap;
var
   Lx, Ly : Integer;
   gray : Byte;   //--
   c : TColor;
begin
   try
      result := nil;
      for Lx := 0 to TransBmp.Canvas.ClipRect.Right do begin
         for Ly := 0 to TransBmp.Canvas.ClipRect.Bottom do begin
   //         if TransBmp.Canvas.Pixels[ Lx, Ly ] <> clBlack then
   //         if (TransBmp.Canvas.Pixels[ Lx, Ly ] > (($00FFFFFF - $00000000) div 2) ) then
            if (TransBmp.Canvas.Pixels[ Lx, Ly ] > (  (  (  $00FFFFFF + ($00FFFFFF - $00000000) div 2)  ) div 2  )  ) then //회색과 흰색 사이
               TransBmp.Canvas.Pixels[ Lx, Ly ] := $00FFFFFF
            else
               TransBmp.Canvas.Pixels[ Lx, Ly ] := $00000000;
         end;
      end;
      result := TransBmp;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :TransColor_1'+'---'); {$ENDIF}
   end;
end;

function TForm1.TransColor_test(TransBmp: TBitmap): Tbitmap;
var
   Lx, Ly : Integer;
   gray : Byte;   //--
   c : TColor;
begin
   try
      result := nil;
     //_흑회백변환
      for Lx:= 0 to TransBmp.Canvas.ClipRect.Right do
      begin
         for Ly:= 0 to TransBmp.Canvas.ClipRect.Bottom do
         begin
            c:= TransBmp.Canvas.Pixels[Lx,Ly];
            gray:= (Byte(c) + Byte(c shr 8) + Byte(c shr 16)) div 3;
            TransBmp.Canvas.Pixels[Lx,Ly]:= RGB(gray,gray,gray);

            if TransBmp.Canvas.Pixels[ Lx, Ly ] <> $00000000 then
               TransBmp.Canvas.Pixels[ Lx, Ly ] := $000000FF;
         end;
      end;
      result := TransBmp;
   except
   {$IFDEF _LOG_} memo1.Lines.Add(FormatDateTime('HH:NN:SS ZZZ ',now)+'[Except] :TransColor_test'+'---'); {$ENDIF}
   end;
end;

end.
